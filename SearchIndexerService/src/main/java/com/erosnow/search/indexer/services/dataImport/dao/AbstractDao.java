package com.erosnow.search.indexer.services.dataImport.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

public abstract class AbstractDao {
	//Bulk import queries
	public static final String CONTENT_ASSET_QUERY = "select c.content_id  as unique_id, a.asset_id, a.asset_type from gobe_Content c join gobe_Asset a where a.asset_id=c.master_asset_id and a.is_publishable='YES' and c.is_publishable='YES' and c.content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and c.master_asset_id is not null ";
	public static final String CONTENT_ASSET_DETAIL_QUERY = "select c.content_id as unique_id, c.content_id,c.content_type_id,c.title as content_title,c.duration as content_duration,c.track_number,c.content_language ,c.erosnow_views,c.youtube_views,c.episode_number,c.popularity as content_popularity,c.release_date as content_release_date ,LEFT(TRIM(c.title),1) as content_prefix,c.short_description as content_short_description ,a.asset_id,a.asset_title,a.asset_type,a.attribute_id,a.rank as asset_popularity ,coalesce(mv.title,mu.title,tv.title,og.title,ad.title) as title ,left(trim(coalesce(mv.title,mu.title,tv.title,og.title,ad.title)),1) as prefix ,coalesce(mv.description,mu.description,tv.description,og.description) as description ,coalesce(mv.language,mu.language,tv.language,og.language) as language ,coalesce(mv.rating,mu.rating,tv.rating,og.rating) as rating ,coalesce(mv.release_date,mu.release_date,og.release_date) as release_date ,coalesce(mv.short_description,tv.short_description,ad.short_description) as short_description ,coalesce(mv.release_year,mu.release_year) as release_year, mv.eros_rating, mv.synopsis, mv.duration ,mu.musician,mu.top_songs,mu.number_of_tracks,mu.genre as attribute_genre,mu.lyricist as attribute_lyricist,tv.first_aired_date,tv.first_aired_year from gobe_Content c join gobe_Asset a  left join gobe_Movie mv on a.attribute_id=mv.movie_id and a.asset_type='MOVIE' left join gobe_Music mu on a.attribute_id=mu.album_id and a.asset_type='MUSIC ALBUM' left join gobe_TVShow tv on a.attribute_id=tv.tv_show_id and a.asset_type='TV SHOWS' left join gobe_Ads ad on a.attribute_id=ad.ads_id and a.asset_type='ADS' left join gobe_Original og on a.attribute_id=og.original_id and a.asset_type='ORIGINAL' where a.asset_id=c.master_asset_id and a.is_publishable='YES' and c.is_publishable='YES' and c.master_asset_id is not null  and c.content_id in( :ids ) group by c.content_id";
	public static final String CONTENT_PARENT_QUERY = "select ccm.ref_content_id as unique_id, ccm.content_id as parent_content_id from gobe_ContentContentMap ccm where ccm.ref_content_id in ( :ids )";
	public static final String CONTENT_ASSET_KEYWORD_QUERY = "select c.content_id as unique_id,group_concat(distinct k.keyword) as content_keywords,group_concat(distinct kk.keyword) as keywords  from gobe_Content c left join gobe_ContentKeywordMap ckm inner join gobe_Keyword k on ckm.keyword_id=k.keyword_id on ckm.content_id=c.content_id left join gobe_AssetKeywordMap akm inner join gobe_Keyword kk on akm.keyword_id=kk.keyword_id on akm.asset_id=c.master_asset_id where c.content_id in (:ids) group by c.content_id";
	public static final String CONTENT_ASSET_RECOMMENDATION_QUERY = "select c.content_id as unique_id,group_concat(distinct crm.reco_content_id order by crm.rank) as content_recommendation ,group_concat(distinct mrm.reco_id order by mrm.rank) as recommendation from gobe_Content c left join gobe_ContentRecoMap crm         inner join gobe_Content cr on cr.content_id=crm.reco_content_id and cr.is_publishable='YES'         inner join gobe_AssetContentMap acmr on acmr.content_id=cr.content_id         inner join gobe_Asset ar on ar.asset_id=acmr.asset_id and ar.is_publishable='YES' on crm.content_id=c.content_id left join gobe_MovieRecoMap mrm         inner join gobe_Asset arr on arr.asset_id=mrm.reco_id and arr.is_publishable='YES' on mrm.asset_id=c.master_asset_id where c.content_id in ( :ids ) group by c.content_id";
	public static final String CONTENT_ASSET_ROLES_QUERY = "select c.content_id as unique_id,group_concat(distinct IF(r.role = 'Singer', pp.name, null) order by pp.rank desc,pp.name) as content_singer , group_concat(distinct IF(r.role = 'Lyricist', pp.name, null) order by pp.rank desc,pp.name) as content_lyricist , group_concat(distinct IF(r.role = 'Music director', pp.name, null) order by pp.rank desc,pp.name) as 'content_music director' , group_concat(distinct IF(r.role = 'Actor', pp.name, null) order by pp.rank desc,pp.name) as content_actor , group_concat(distinct IF(r.role = 'Director', pp.name, null) order by pp.rank desc,pp.name) as content_director , group_concat(distinct IF(r.role = 'Playback', pp.name, null) order by pp.rank desc,pp.name) as content_playback , group_concat(distinct IF(r.role = 'Producer', pp.name, null) order by pp.rank desc,pp.name) as content_producer , group_concat(distinct IF(ra.role = 'Singer', ppa.name, null) order by ppa.rank desc,ppa.name) as singer , group_concat(distinct IF(ra.role = 'Lyricist', ppa.name, null) order by ppa.rank desc,ppa.name) as lyricist , group_concat(distinct IF(ra.role = 'Music director', ppa.name, null) order by ppa.rank desc,ppa.name) as 'music director' , group_concat(distinct IF(ra.role = 'Actor', ppa.name, null) order by ppa.rank desc,ppa.name) as actor , group_concat(distinct IF(ra.role = 'Director', ppa.name, null) order by ppa.rank desc,ppa.name) as director , group_concat(distinct IF(ra.role = 'Playback', ppa.name, null) order by ppa.rank desc,ppa.name) as playback , group_concat(distinct IF(ra.role = 'Producer', ppa.name, null) order by ppa.rank desc,ppa.name) as producer from gobe_Content c left join gobe_ContentPeopleMap cpmp          inner join gobe_People pp on pp.people_id=cpmp.people_id         inner join gobe_Roles r on r.role_id=cpmp.role_id on cpmp.content_id=c.content_id left join gobe_AssetPeopleMap apmp         inner join gobe_People ppa on ppa.people_id=apmp.people_id         inner join gobe_Roles ra on ra.role_id=apmp.role_id on apmp.asset_id=c.master_asset_id where c.content_id in (:ids) group by c.content_id";
	//public static final String CONTENT_ASSET_PRODUCT_QUERY = "select  c.content_id as unique_id,group_concat(distinct pcm.product_id) as content_product  ,group_concat(distinct p.product_name) as  content_product_name, count(distinct pcm.product_id) as content_product_count   ,group_concat(distinct pcma.product_id) as product,group_concat(distinct pa.product_name) as  product_name  , count(distinct pcma.product_id) as product_count, group_concat(distinct ca2.content_language) as subtitles  from gobe_Content c   left join gobe_ProductContentMap pcm inner join gobe_Product p on p.product_id=pcm.product_id on c.content_id=pcm.content_id   left join gobe_AssetContentMap acm          inner join gobe_Content cm on cm.content_id=acm.content_id and cm.content_type_id = 1           and cm.is_publishable='YES'         inner join gobe_ProductContentMap pcma on pcma.content_id=cm.content_id                                                      inner join gobe_Product pa on pa.product_id=pcma.product_id   on acm.asset_id=c.master_asset_id   left join gobe_AssetContentMap acm2         inner join gobe_Content cm2 on cm2.content_id=acm2.content_id and cm2.content_type_id = 1           and cm2.is_publishable='YES'        inner join gobe_ContentContentMap ccma2 on ccma2.content_id=cm2.content_id                                                      inner join gobe_Content ca2 on ca2.content_id=ccma2.ref_content_id and ca2.content_type_id=21   on acm2.asset_id=c.master_asset_id   where c.content_id in (:ids) group by c.content_id";
	public static final String CONTENT_PRODUCT_QUERY = "   select  c.content_id as unique_id,group_concat(distinct pcm.product_id) as content_product     ,group_concat(distinct p.product_name) as  content_product_name   , count(distinct pcm.product_id) as content_product_count      from gobe_Content c      left join gobe_ProductContentMap pcm            inner join gobe_Product p on p.product_id=pcm.product_id on c.content_id=pcm.content_id       where c.content_id in ( :ids ) group by c.content_id";
	public static final String CONTENT_ASSET_PRODUCT_QUERY = " select  c.content_id as unique_id          ,group_concat(distinct pcma.product_id) as product,group_concat(distinct pa.product_name) as  product_name        , count(distinct pcma.product_id) as product_count       from gobe_Content c         left join gobe_AssetContentMap acm                                inner join gobe_Content cm on cm.content_id=acm.content_id and cm.content_type_id = 1           and cm.is_publishable='YES'            inner join gobe_ProductContentMap pcma on pcma.content_id=cm.content_id                                                                            inner join gobe_Product pa on pa.product_id=pcma.product_id   on acm.asset_id=c.master_asset_id           where c.content_id in ( :ids )     group by c.content_id ";
	public static final String CONTENT_ASSET_SUBTITLE_QUERY = " select  c.content_id as unique_id          ,group_concat(distinct ca2.content_language) as subtitles        from gobe_Content c         left join gobe_AssetContentMap acm2                               inner join gobe_Content cm2 on cm2.content_id=acm2.content_id and cm2.content_type_id = 1           and cm2.is_publishable='YES'               inner join gobe_ContentContentMap ccma2 on ccma2.content_id=cm2.content_id                                           inner join gobe_Content ca2 on ca2.content_id=ccma2.ref_content_id and ca2.content_type_id=21   on acm2.asset_id=c.master_asset_id          where c.content_id in ( :ids )     group by c.content_id ";
	public static final String CONTENT_ASSET_GENRE_QUERY = "select  c.content_id as unique_id,group_concat(distinct cgm.genre_id) as content_genre_id, group_concat(distinct g.genre_type) as content_genre ,group_concat(distinct mgm.genre_id) as genre_id,group_concat(distinct ga.genre_type) as  genre from gobe_Content c left join gobe_ContentGenreMap cgm inner join gobe_Genres g on cgm.genre_id=g.genre_id on c.content_id=cgm.content_id  left join gobe_MovieGenreMap mgm          inner join gobe_Genres ga on ga.genre_id=mgm.genre_id  on mgm.movie_id=c.master_asset_id where c.content_id in (:ids) group by c.content_id";

	public static final String CONTENT_ASSET_ALLOW_BLOCK_QUERY = "  select c.content_id as unique_id  ,group_concat(distinct gccm.code) as content_allowed   ,group_concat(distinct acm.code) as asset_allowed    ,group_concat(distinct gaa.location_code) as allowed   ,group_concat(distinct gba.location_code) as blocked   from gobe_Content c   left join gobe_AssetCountryMap acm on acm.asset_id=c.master_asset_id   left join gobe_ContentCountryMap gccm on gccm.content_id=c.content_id   left join gobe_GeoAllowAsset gaa on gaa.asset_id=c.master_asset_id   left join gobe_GeoBlockAsset gba on gba.asset_id=c.master_asset_id    where c.content_id in (:ids) group by c.content_id";
	//public static final String CONTENT_ASSET_IMAGES_PATH_QUERY = "select c.content_id as unique_id , group_concat(distinct concat(cfm.distributionURL,cpm.content_s3_path)) as play_url     ,group_concat(distinct concat(cast(ipm.profile_id as char),'­',cast(ci.content_type_id as char))) as content_qimage_type    ,group_concat(distinct concat(cfmi.distributionURL,ipm.content_s3_path)) as content_qimages     ,coalesce(group_concat(distinct concat(cfmim.distributionURL,cim.mezz_file_path)), group_concat(distinct concat(cfmimg.distributionURL,cimg.mezz_file_path))) as content_images    ,coalesce(group_concat(distinct cim.content_type_id),group_concat(distinct cimg.content_type_id)) as content_image_type     ,group_concat(distinct concat(cfmima.distributionURL,cima.mezz_file_path)) as images   ,group_concat(distinct cima.content_type_id) as image_type     ,group_concat(distinct concat(cast(ipmq.profile_id as char),'-',cast(cimq.content_type_id as char))) as qimage_type    ,group_concat(distinct concat(cfmimq.distributionURL,ipmq.content_s3_path)) as qimages    ,group_concat(distinct CONCAT(cast(cpmcpm.profile_id as char),'|',cast(IFNULL(cpcp.total_bitrate,cpcp.profile_title) as char))) as content_bitrates   from gobe_Content c    left join gobe_ContentProfileMap cpm                    inner join gobe_PlatformProfileMap ppm on cpm.profile_id=ppm.profile_id and ppm.platform_id=2 and cpm.is_publishable='YES'                   inner join gobe_ProfileQuality pq on ppm.quality_id=pq.quality_id                   inner join gobe_ContentProfiles cp on cpm.profile_id=cp.profile_id                   inner join gobe_CloudFrontMap cfm on cpm.s3_catalog=cfm.catalog and cfm.protocol='http'    on cpm.content_id=c.content_id and c.content_type_id=4    left join gobe_ContentContentMap ccmi                   inner join gobe_Content ci on ci.content_id=ccmi.ref_content_id and ci.is_publishable='YES'                   inner join gobe_ImageProfileMap ipm on ipm.content_id = ci.content_id and ipm.is_publishable='YES'                   inner join gobe_CloudFrontMap cfmi on cfmi.catalog=ci.mezz_catalog                   inner join gobe_Images i on i.content_type_id = ci.content_type_id    on ccmi.content_id=c.content_id    left join gobe_AssetContentMap acmim                   inner join gobe_Content cim on cim.content_id=acmim.content_id and cim.is_publishable='YES'                   inner join gobe_CloudFrontMap cfmim on cfmim.catalog = cim.mezz_catalog                   inner join gobe_Images iim on iim.content_type_id = cim.content_type_id    on acmim.asset_id=c.master_asset_id and c.content_type_id in(1,4)    left join gobe_ContentContentMap ccmimg                   inner join gobe_Content cimg on cimg.content_id=ccmimg.ref_content_id and cimg.is_publishable='YES'                   inner join gobe_CloudFrontMap cfmimg on cfmimg.catalog = cimg.mezz_catalog                   inner join gobe_Images iimg on iimg.content_type_id = cimg.content_type_id    on ccmimg.content_id=c.content_id and c.content_type_id not in(1,4)    left join gobe_AssetContentMap acmima                   inner join gobe_Content cima on cima.content_id=acmima.content_id and cima.is_publishable='YES'                   inner join gobe_CloudFrontMap cfmima on cfmima.catalog = cima.mezz_catalog                   inner join gobe_Images iima on iima.content_type_id = cima.content_type_id    on acmima.asset_id=c.master_asset_id     left join gobe_AssetContentMap acmimq                   inner join gobe_Content cimq on cimq.content_id=acmimq.content_id and cimq.is_publishable='YES'                   inner join gobe_CloudFrontMap cfmimq on cfmimq.catalog = cimq.mezz_catalog                   inner join gobe_Images iimq on iimq.content_type_id = cimq.content_type_id                   inner join gobe_ImageProfileMap ipmq on ipmq.content_id=cimq.content_id and ipmq.is_publishable='YES'    on acmimq.asset_id=c.master_asset_id    left join gobe_ContentProfileMap cpmcpm           inner join  gobe_ContentProfiles cpcp on cpcp.profile_id=cpmcpm.profile_id   on cpmcpm.content_id=c.content_id   where c.content_id in(:ids)    group by c.content_id";
	public static final String CONTENT_IMAGES_PATH_QUERY = "select c.content_id as unique_id , group_concat(distinct concat(cfm.distributionURL,cpm.content_s3_path)) as play_url         ,group_concat(distinct concat(cast(ipm.profile_id as char),'­',cast(ci.content_type_id as char))) as content_qimage_type        ,group_concat(distinct concat(cfmi.distributionURL,ipm.content_s3_path)) as content_qimages         ,coalesce(group_concat(distinct concat(cfmim.distributionURL,cim.mezz_file_path)), group_concat(distinct concat(cfmimg.distributionURL,cimg.mezz_file_path))) as content_images        ,coalesce(group_concat(distinct cim.content_type_id),group_concat(distinct cimg.content_type_id)) as content_image_type         ,group_concat(distinct CONCAT(cast(cpmcpm.profile_id as char),'|',cast(IFNULL(cpcp.total_bitrate,cpcp.profile_title) as char))) as content_bitrates       from gobe_Content c        left join gobe_ContentProfileMap cpm                               inner join gobe_PlatformProfileMap ppm on cpm.profile_id=ppm.profile_id and ppm.platform_id=2 and cpm.is_publishable='YES'                              inner join gobe_ProfileQuality pq on ppm.quality_id=pq.quality_id                              inner join gobe_ContentProfiles cp on cpm.profile_id=cp.profile_id                              inner join gobe_CloudFrontMap cfm on cpm.s3_catalog=cfm.catalog and cfm.protocol='http'    on cpm.content_id=c.content_id and c.content_type_id=4        left join gobe_ContentContentMap ccmi                              inner join gobe_Content ci on ci.content_id=ccmi.ref_content_id and ci.is_publishable='YES'                              inner join gobe_ImageProfileMap ipm on ipm.content_id = ci.content_id and ipm.is_publishable='YES'                              inner join gobe_CloudFrontMap cfmi on cfmi.catalog=ci.mezz_catalog                              inner join gobe_Images i on i.content_type_id = ci.content_type_id    on ccmi.content_id=c.content_id        left join gobe_AssetContentMap acmim                              inner join gobe_Content cim on cim.content_id=acmim.content_id and cim.is_publishable='YES'                              inner join gobe_CloudFrontMap cfmim on cfmim.catalog = cim.mezz_catalog                              inner join gobe_Images iim on iim.content_type_id = cim.content_type_id    on acmim.asset_id=c.master_asset_id and c.content_type_id in(1,4)        left join gobe_ContentContentMap ccmimg                              inner join gobe_Content cimg on cimg.content_id=ccmimg.ref_content_id and cimg.is_publishable='YES'                              inner join gobe_CloudFrontMap cfmimg on cfmimg.catalog = cimg.mezz_catalog                              inner join gobe_Images iimg on iimg.content_type_id = cimg.content_type_id    on ccmimg.content_id=c.content_id and c.content_type_id not in(1,4)        left join gobe_ContentProfileMap cpmcpm                      inner join  gobe_ContentProfiles cpcp on cpcp.profile_id=cpmcpm.profile_id   on cpmcpm.content_id=c.content_id      where c.content_id in( :ids )       group by c.content_id    ";
	public static final String CONTENT_ASSET_IMAGES_PATH_QUERY = " select c.content_id as unique_id     ,group_concat(distinct concat(cfmima.distributionURL,cima.mezz_file_path)) as images       ,group_concat(distinct cima.content_type_id) as image_type         ,group_concat(distinct concat(cast(ipmq.profile_id as char),'-',cast(cimq.content_type_id as char))) as qimage_type        ,group_concat(distinct concat(cfmimq.distributionURL,ipmq.content_s3_path)) as qimages         from gobe_Content c         left join gobe_AssetContentMap acmima                              inner join gobe_Content cima on cima.content_id=acmima.content_id and cima.is_publishable='YES'                              inner join gobe_CloudFrontMap cfmima on cfmima.catalog = cima.mezz_catalog                              inner join gobe_Images iima on iima.content_type_id = cima.content_type_id    on acmima.asset_id=c.master_asset_id         left join gobe_AssetContentMap acmimq                              inner join gobe_Content cimq on cimq.content_id=acmimq.content_id and cimq.is_publishable='YES'                              inner join gobe_CloudFrontMap cfmimq on cfmimq.catalog = cimq.mezz_catalog                              inner join gobe_Images iimq on iimq.content_type_id = cimq.content_type_id                              inner join gobe_ImageProfileMap ipmq on ipmq.content_id=cimq.content_id and ipmq.is_publishable='YES'    on acmimq.asset_id=c.master_asset_id       where c.content_id in( :ids )       group by c.content_id           ";
	//public static final String CONTENT_ASSET_BAS_PRM_COUNT_QUERY = "select sub1.content_id as unique_id, group_concat(distinct asset_content_allowed) as asset_content_allowed  , group_concat(total_contents) as total_contents, group_concat(distinct start_date) as start_date, group_concat(distinct end_date) as end_date , group_concat(distinct premium_geo_allowed) as premium_geo_allowed  , group_concat(premium_count) as premium_count  , group_concat(distinct basic_geo_allowed) as basic_geo_allowed  , group_concat(basic_count) as basic_count    from ( select c.content_id,coalesce(ccm1.code,ccm2.code,ccm3.code) as asset_content_allowed    ,coalesce(if(count(distinct ccm1.content_id)>0,count(distinct ccm1.content_id),null),if(count(distinct ccm2.content_id)>0,count(distinct ccm2.content_id),null),if(count(distinct ccm3.content_id)>0,count(distinct ccm3.content_id),null)) as total_contents       , max(c2.release_date) as end_date, min(c2.release_date) as start_date     from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id      left join gobe_Content c1                    inner join gobe_ContentCountryMap ccm1 on c1.content_id=ccm1.content_id and c1.is_publishable='YES' and c1.content_type_id in(3,4)  on c1.master_asset_id=c.master_asset_id            left join gobe_Content c2          inner join gobe_ContentCountryMap ccm2 on c2.content_id=ccm2.content_id and c2.is_publishable='YES' and c2.content_type_id=34  on c2.master_asset_id=c.master_asset_id              left join gobe_Content c3          inner join gobe_ContentCountryMap ccm3 on c3.content_id=ccm3.content_id and c3.is_publishable='YES' and c3.content_type_id=1  on c3.master_asset_id=c.master_asset_id                           where c.content_id in(:ids)   group by c.content_id, asset_content_allowed ) sub1 join    (select c.content_id,coalesce(ccm4.code,ccm5.code,ccm6.code) as premium_geo_allowed    ,coalesce(if(count(distinct ccm4.content_id)>0,count(distinct ccm4.content_id),null),if(count(distinct ccm5.content_id)>0,count(distinct ccm5.content_id),null),if(count(distinct ccm6.content_id)>0,count(distinct ccm6.content_id),null)) as premium_count     from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id    left join gobe_Content c4          inner join gobe_ContentCountryMap ccm4 on c4.content_id=ccm4.content_id and c4.is_publishable='YES' and c4.content_type_id in (3,4)          inner join gobe_ProductContentMap pcm4 on pcm4.content_id=c4.content_id          inner join gobe_Product p4 on p4.product_id=pcm4.product_id           and (p4.product_name like ('%Subscription%') or p4.product_name like('%Offer%'))          and p4.product_name not in ('Subscription Free')  on c4.master_asset_id=c.master_asset_id    left join gobe_Content c5          inner join gobe_ContentCountryMap ccm5 on c5.content_id=ccm5.content_id and c5.is_publishable='YES' and c5.content_type_id=34          inner join gobe_ProductContentMap pcm5 on pcm5.content_id=c5.content_id          inner join gobe_Product p5 on p5.product_id=pcm5.product_id           and (p5.product_name like ('%Subscription%') or p5.product_name like('%Offer%'))          and p5.product_name not in ('Subscription Free')  on c5.master_asset_id=c.master_asset_id                  left join gobe_Content c6          inner join gobe_ContentCountryMap ccm6 on c6.content_id=ccm6.content_id and c6.is_publishable='YES' and c6.content_type_id=1          inner join gobe_ProductContentMap pcm6 on pcm6.content_id=c6.content_id          inner join gobe_Product p6 on p6.product_id=pcm6.product_id           and (p6.product_name like ('%Subscription%') or p6.product_name like('%Offer%'))          and p6.product_name not in ('Subscription Free')  on c6.master_asset_id=c.master_asset_id                   where c.content_id in(:ids)     group by c.content_id, premium_geo_allowed ) sub2 on sub1.content_id=sub2.content_id join    (select c.content_id,coalesce(ccm7.code,ccm8.code,ccm9.code) as basic_geo_allowed    ,coalesce(if(count(distinct ccm7.content_id)>0,count(distinct ccm7.content_id),null),if(count(distinct ccm8.content_id)>0,count(distinct ccm8.content_id),null),if(count(distinct ccm9.content_id)>0,count(distinct ccm9.content_id),null)) as basic_count     from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id   left join gobe_Content c7          inner join gobe_ContentCountryMap ccm7 on c7.content_id=ccm7.content_id and c7.is_publishable='YES' and c7.content_type_id in (3,4)          inner join gobe_ProductContentMap pcm7 on pcm7.content_id=c7.content_id          inner join gobe_Product p7 on p7.product_id=pcm7.product_id           and p7.product_name = 'Subscription Free'  on c7.master_asset_id=c.master_asset_id    left join gobe_Content c8          inner join gobe_ContentCountryMap ccm8 on c8.content_id=ccm8.content_id and c8.is_publishable='YES' and c8.content_type_id=34          inner join gobe_ProductContentMap pcm8 on pcm8.content_id=c8.content_id          inner join gobe_Product p8 on p8.product_id=pcm8.product_id           and p8.product_name = 'Subscription Free'  on c8.master_asset_id=c.master_asset_id                   left join gobe_Content c9          inner join gobe_ContentCountryMap ccm9 on c9.content_id=ccm9.content_id and c9.is_publishable='YES' and c9.content_type_id=1          inner join gobe_ProductContentMap pcm9 on pcm9.content_id=c9.content_id          inner join gobe_Product p9 on p9.product_id=pcm9.product_id           and p9.product_name = 'Subscription Free'  on c9.master_asset_id=c.master_asset_id                   where c.content_id in(:ids)     group by c.content_id, basic_geo_allowed ) sub3 on sub1.content_id=sub3.content_id    group by sub1.content_id  ";
	public static final String CONTENT_ASSET_BASIC_COUNT_QUERY = "select sub3.content_id as unique_id    , group_concat(distinct basic_geo_allowed) as basic_geo_allowed      , group_concat(basic_count) as basic_count        from (     select c.content_id,coalesce(ccm7.code,ccm8.code,ccm9.code) as basic_geo_allowed        ,coalesce(if(count(distinct ccm7.content_id)>0,count(distinct ccm7.content_id),null),if(count(distinct ccm8.content_id)>0,count(distinct ccm8.content_id),null),if(count(distinct ccm9.content_id)>0,count(distinct ccm9.content_id),null)) as basic_count         from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id       left join gobe_Content c7                     inner join gobe_ContentCountryMap ccm7 on c7.content_id=ccm7.content_id and c7.is_publishable='YES' and c7.content_type_id in (3,4)                     inner join gobe_ProductContentMap pcm7 on pcm7.content_id=c7.content_id                     inner join gobe_Product p7 on p7.product_id=pcm7.product_id           and p7.product_name = 'Subscription Free'  on c7.master_asset_id=c.master_asset_id        left join gobe_Content c8          inner join gobe_ContentCountryMap ccm8 on c8.content_id=ccm8.content_id and c8.is_publishable='YES' and c8.content_type_id=34                     inner join gobe_ProductContentMap pcm8 on pcm8.content_id=c8.content_id                     inner join gobe_Product p8 on p8.product_id=pcm8.product_id           and p8.product_name = 'Subscription Free'  on c8.master_asset_id=c.master_asset_id                       left join gobe_Content c9                     inner join gobe_ContentCountryMap ccm9 on c9.content_id=ccm9.content_id and c9.is_publishable='YES' and c9.content_type_id=1                     inner join gobe_ProductContentMap pcm9 on pcm9.content_id=c9.content_id                     inner join gobe_Product p9 on p9.product_id=pcm9.product_id           and p9.product_name = 'Subscription Free'  on c9.master_asset_id=c.master_asset_id                       where c.content_id in( :ids )         group by c.content_id, basic_geo_allowed ) sub3     group by sub3.content_id  ";
	//public static final String CONTENT_ASSET_PREMIUM_COUNT_QUERY = "select sub2.content_id as unique_id    , group_concat(distinct premium_geo_allowed) as premium_geo_allowed      , group_concat(premium_count) as premium_count      from (     select c.content_id,coalesce(ccm4.code,ccm5.code,ccm6.code) as premium_geo_allowed        ,coalesce(if(count(distinct ccm4.content_id)>0,count(distinct ccm4.content_id),null),if(count(distinct ccm5.content_id)>0,count(distinct ccm5.content_id),null),if(count(distinct ccm6.content_id)>0,count(distinct ccm6.content_id),null)) as premium_count         from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id        left join gobe_Content c4                     inner join gobe_ContentCountryMap ccm4 on c4.content_id=ccm4.content_id and c4.is_publishable='YES' and c4.content_type_id in (3,4)                     inner join gobe_ProductContentMap pcm4 on pcm4.content_id=c4.content_id                     inner join gobe_Product p4 on p4.product_id=pcm4.product_id           and (p4.product_name like ('%Subscription%') or p4.product_name like('%Offer%'))          and p4.product_name not in ('Subscription Free')  on c4.master_asset_id=c.master_asset_id        left join gobe_Content c5                     inner join gobe_ContentCountryMap ccm5 on c5.content_id=ccm5.content_id and c5.is_publishable='YES' and c5.content_type_id=34                     inner join gobe_ProductContentMap pcm5 on pcm5.content_id=c5.content_id                     inner join gobe_Product p5 on p5.product_id=pcm5.product_id           and (p5.product_name like ('%Subscription%') or p5.product_name like('%Offer%'))          and p5.product_name not in ('Subscription Free')  on c5.master_asset_id=c.master_asset_id                      left join gobe_Content c6                     inner join gobe_ContentCountryMap ccm6 on c6.content_id=ccm6.content_id and c6.is_publishable='YES' and c6.content_type_id=1                     inner join gobe_ProductContentMap pcm6 on pcm6.content_id=c6.content_id                     inner join gobe_Product p6 on p6.product_id=pcm6.product_id           and (p6.product_name like ('%Subscription%') or p6.product_name like('%Offer%'))          and p6.product_name not in ('Subscription Free')  on c6.master_asset_id=c.master_asset_id                       where c.content_id in( :ids )         group by c.content_id, premium_geo_allowed ) sub2    group by sub2.content_id  ";
	public static final String CONTENT_ASSET_PREMIUM_COUNT_3_4_QUERY = "select sub2.content_id as unique_id       , group_concat(distinct premium_geo_allowed) as premium_geo_allowed         , group_concat(premium_count) as premium_count      from (        select c.content_id, ccm4.code as premium_geo_allowed           ,if(count(distinct ccm4.content_id)>0,count(distinct ccm4.content_id),null) as premium_count            from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id           left join gobe_Content c4                                inner join gobe_ContentCountryMap ccm4 on c4.content_id=ccm4.content_id and c4.is_publishable='YES' and c4.content_type_id in (3,4)             inner join gobe_ProductContentMap pcm4 on pcm4.content_id=c4.content_id                                inner join gobe_Product p4 on p4.product_id=pcm4.product_id           and (p4.product_name like ('%Subscription%') or p4.product_name like('%Offer%'))          and p4.product_name not in ('Subscription Free')  on c4.master_asset_id=c.master_asset_id           where c.content_id in( :ids )             group by c.content_id, premium_geo_allowed      ) sub2    group by sub2.content_id ";
	public static final String CONTENT_ASSET_PREMIUM_COUNT_34_QUERY = "select sub2.content_id as unique_id       , group_concat(distinct premium_geo_allowed) as premium_geo_allowed         , group_concat(premium_count) as premium_count      from (        select c.content_id,ccm5.code as premium_geo_allowed           ,if(count(distinct ccm5.content_id)>0,count(distinct ccm5.content_id),null) as premium_count             from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id            left join gobe_Content c5                                inner join gobe_ContentCountryMap ccm5 on c5.content_id=ccm5.content_id and c5.is_publishable='YES' and c5.content_type_id=34                        inner join gobe_ProductContentMap pcm5 on pcm5.content_id=c5.content_id                                inner join gobe_Product p5 on p5.product_id=pcm5.product_id           and (p5.product_name like ('%Subscription%') or p5.product_name like('%Offer%'))          and p5.product_name not in ('Subscription Free')  on c5.master_asset_id=c.master_asset_id                          where c.content_id in( :ids )         group by c.content_id, premium_geo_allowed    ) sub2    group by sub2.content_id";
	public static final String CONTENT_ASSET_PREMIUM_COUNT_1_QUERY = "select sub2.content_id as unique_id       , group_concat(distinct premium_geo_allowed) as premium_geo_allowed         , group_concat(premium_count) as premium_count      from (        select c.content_id,ccm6.code as premium_geo_allowed           ,if(count(distinct ccm6.content_id)>0,count(distinct ccm6.content_id),null) as premium_count             from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id            left join gobe_Content c6                                inner join gobe_ContentCountryMap ccm6 on c6.content_id=ccm6.content_id and c6.is_publishable='YES' and c6.content_type_id=1                         inner join gobe_ProductContentMap pcm6 on pcm6.content_id=c6.content_id                                inner join gobe_Product p6 on p6.product_id=pcm6.product_id           and (p6.product_name like ('%Subscription%') or p6.product_name like('%Offer%'))          and p6.product_name not in ('Subscription Free')  on c6.master_asset_id=c.master_asset_id                           where c.content_id in(  :ids )         group by c.content_id, premium_geo_allowed    ) sub2    group by sub2.content_id ";
	//public static final String CONTENT_ASSET_TOTAL_COUNT_QUERY = "select sub1.content_id as unique_id, group_concat(distinct asset_content_allowed) as asset_content_allowed     , group_concat(total_contents) as total_contents, group_concat(distinct start_date) as start_date, group_concat(distinct end_date) as end_date    from (     select c.content_id,coalesce(ccm1.code,ccm2.code,ccm3.code) as asset_content_allowed        ,coalesce(if(count(distinct ccm1.content_id)>0,count(distinct ccm1.content_id),null),if(count(distinct ccm2.content_id)>0,count(distinct ccm2.content_id),null),if(count(distinct ccm3.content_id)>0,count(distinct ccm3.content_id),null)) as total_contents           , max(c2.release_date) as end_date, min(c2.release_date) as start_date          from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id           left join gobe_Content c1                               inner join gobe_ContentCountryMap ccm1 on c1.content_id=ccm1.content_id and c1.is_publishable='YES' and c1.content_type_id in(3,4)  on c1.master_asset_id=c.master_asset_id                 left join gobe_Content c2                     inner join gobe_ContentCountryMap ccm2 on c2.content_id=ccm2.content_id and c2.is_publishable='YES' and c2.content_type_id=34  on c2.master_asset_id=c.master_asset_id                   left join gobe_Content c3                     inner join gobe_ContentCountryMap ccm3 on c3.content_id=ccm3.content_id and c3.is_publishable='YES' and c3.content_type_id=1  on c3.master_asset_id=c.master_asset_id                               where c.content_id in( :ids )       group by c.content_id, asset_content_allowed     ) sub1   group by sub1.content_id  ";
	public static final String CONTENT_ASSET_TOTAL_COUNT_3_4_QUERY = "   select sub1.content_id as unique_id, group_concat(distinct asset_content_allowed) as asset_content_allowed        , group_concat(total_contents) as total_contents     from (        select c.content_id, ccm1.code as asset_content_allowed           ,if(count(distinct ccm1.content_id)>0,count(distinct ccm1.content_id),null) as total_contents              from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id               left join gobe_Content c1                                          inner join gobe_ContentCountryMap ccm1 on c1.content_id=ccm1.content_id and c1.is_publishable='YES' and c1.content_type_id in(3,4)  on c1.master_asset_id=c.master_asset_id                     where c.content_id in( :ids )            group by c.content_id, asset_content_allowed          ) sub1   group by sub1.content_id    ";
	public static final String CONTENT_ASSET_TOTAL_COUNT_34_QUERY = " select sub1.content_id as unique_id, group_concat(distinct asset_content_allowed) as asset_content_allowed         , group_concat(total_contents) as total_contents, group_concat(distinct start_date) as start_date, group_concat(distinct end_date) as end_date    from (         select c.content_id,ccm2.code as asset_content_allowed             ,if(count(distinct ccm2.content_id)>0,count(distinct ccm2.content_id),null) as total_contents                , max(c2.release_date) as end_date, min(c2.release_date) as start_date              from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id              left join gobe_Content c2                                inner join gobe_ContentCountryMap ccm2 on c2.content_id=ccm2.content_id and c2.is_publishable='YES' and c2.content_type_id=34  on c2.master_asset_id=c.master_asset_id                       where c.content_id in( :ids )           group by c.content_id, asset_content_allowed         ) sub1   group by sub1.content_id       ";
	public static final String CONTENT_ASSET_TOTAL_COUNT_1_QUERY = " select sub1.content_id as unique_id, group_concat(distinct asset_content_allowed) as asset_content_allowed         , group_concat(total_contents) as total_contents   from (         select c.content_id,ccm3.code as asset_content_allowed             ,if(count(distinct ccm3.content_id)>0,count(distinct ccm3.content_id),null) as total_contents                from gobe_Content c join gobe_Asset a on a.asset_id=c.master_asset_id              left join gobe_Content c3                                inner join gobe_ContentCountryMap ccm3 on c3.content_id=ccm3.content_id and c3.is_publishable='YES' and c3.content_type_id=1  on c3.master_asset_id=c.master_asset_id                                   where c.content_id in( :ids  )           group by c.content_id, asset_content_allowed         ) sub1   group by sub1.content_id   ";
	public static final String CONTENT_ASSET_CONTENT_ALL_QUERY = "select sub1.content_id as unique_id, group_concat(content_types) as content_types, group_concat(content_type_ids) as content_type_ids, group_concat(content_type_count) as content_type_count  , content_id_all as content_id_all, content_type_id_all as content_type_id_all   from (  select c.content_id,c.master_asset_id,ct1.content_type as content_types ,ct1.content_type_id as content_type_ids, count(*) as content_type_count   from gobe_Content c  left join gobe_Content c1           inner join gobe_ContentTypes ct1 on c1.content_type_id=ct1.content_type_id and ct1.content_type not like '%img%'          and ct1.content_type not like '%subtitles%' and ct1.content_type not like '%url%' and ct1.content_type not like '%preview%'          and c1.is_publishable='YES'  on c1.master_asset_id=c.master_asset_id   where c.content_id in(:ids)    group by c.content_id, ct1.content_type   ) sub1 join  ( select c.content_id,c.master_asset_id,group_concat(c2.content_id) content_id_all, group_concat(ct2.content_type_id) as content_type_id_all  from gobe_Content c  left join gobe_Content c2          inner join gobe_ContentTypes ct2 on c2.content_type_id=ct2.content_type_id and ct2.content_type not like '%img%'          and ct2.content_type not like '%subtitles%' and ct2.content_type not like '%url%' and ct2.content_type not like '%preview%'          and c2.is_publishable='YES'  on c2.master_asset_id=c.master_asset_id   where c.content_id in(:ids)   group by c.content_id   ) sub2 on sub1.content_id=sub2.content_id group by sub1.content_id  ";

	public static final String CONTENT_ASSET_PRODUCT_MOVIES_QUERY = "select c.content_id as unique_id , group_concat(distinct pcm1.product_id) as products_movies  , group_concat(distinct pcm2.product_id) as products_albums  , group_concat(distinct pcm3.product_id) as products_tvshows  from gobe_Content c  left join gobe_Content c1           inner join gobe_ProductContentMap pcm1 on pcm1.content_id = c1.content_id and c1.content_type_id IN (1,6)  on c1.master_asset_id=c.master_asset_id   left join gobe_Content c2          inner join gobe_ProductContentMap pcm2 on pcm2.content_id = c2.content_id and c2.content_type_id IN (3,4)  on c2.master_asset_id=c.master_asset_id   left join gobe_Content c3          inner join gobe_ProductContentMap pcm3 on pcm3.content_id = c3.content_id and c3.content_type_id IN (34)  on c3.master_asset_id=c.master_asset_id   where c.content_id in( :ids )   group by c.content_id   ";

	public static final String PLAYLIST_IMAGES_QUERY = "select concat(pl.page_id,'-',pl.location_id,'-',pl.position,'-',pc.asset_id,'-',pc.content_id) as unique_id    ,group_concat(distinct concat(cfm2.distributionURL,ipm2.content_s3_path)) as images, group_concat(distinct c2.content_type_id) as image_type     ,coalesce(group_concat(distinct concat(cfmim.distributionURL,cim.mezz_file_path)), group_concat(distinct concat(cfmimg.distributionURL,cimg.mezz_file_path))) as content_images     ,coalesce(group_concat(distinct cim.content_type_id),group_concat(distinct cimg.content_type_id)) as content_image_type     from gobe_PlaylistLocationMap pl join gobe_PlaylistContentMap pc on pl.passet_id=pc.passet_id    inner join gobe_Playlist p on p.asset_id=pc.passet_id   inner join gobe_Asset a on a.asset_id=pc.passet_id     left join gobe_Content c3 on c3.master_asset_id=pc.asset_id and c3.content_id=pc.content_id    left join gobe_AssetContentMap acm2          inner join gobe_Content c2 on c2.content_id=acm2.content_id and c2.is_publishable='YES'          inner join gobe_CloudFrontMap cfm2 on cfm2.catalog=c2.mezz_catalog          inner join gobe_ImageProfileMap ipm2 on ipm2.content_id=c2.content_id and ipm2.is_publishable='YES' and ipm2.profile_id=1          inner join gobe_Images i2 on i2.content_type_id=c2.content_type_id    on acm2.asset_id=pc.asset_id    left join gobe_ContentContentMap ccmimg                   inner join gobe_Content cimg on cimg.content_id=ccmimg.ref_content_id and cimg.is_publishable='YES'                   inner join gobe_CloudFrontMap cfmimg on cfmimg.catalog = cimg.mezz_catalog           inner join gobe_ImageProfileMap ipmimg on ipmimg.content_id=cimg.content_id and ipmimg.is_publishable='YES' and ipmimg.profile_id=1            inner join gobe_Images iimg on iimg.content_type_id = cimg.content_type_id    on ccmimg.content_id=pc.content_id and c3.content_type_id not in(1,4)     left join gobe_AssetContentMap acmim                   inner join gobe_Content cim on cim.content_id=acmim.content_id and cim.is_publishable='YES'                   inner join gobe_CloudFrontMap cfmim on cfmim.catalog = cim.mezz_catalog           inner join gobe_ImageProfileMap ipmim on ipmim.content_id=cim.content_id  and ipmim.is_publishable='YES' and ipmim.profile_id=1          inner join gobe_Images iim on iim.content_type_id = cim.content_type_id    on acmim.asset_id=pc.asset_id and c3.content_type_id in(1,4)         where pl.passet_id in ( :ids )   group by unique_id ";
	public static final String PLAYLIST_ALLOW_QUERY = "select concat(pl.page_id,'-',pl.location_id,'-',pl.position,'-',pc.asset_id,'-',pc.content_id) as unique_id   ,group_concat(distinct acm.code) as asset_allowed   , group_concat(distinct ccm4.code) as content_allowed    from gobe_PlaylistLocationMap pl join gobe_PlaylistContentMap pc on pl.passet_id=pc.passet_id    inner join gobe_Playlist p on p.asset_id=pc.passet_id   inner join gobe_Asset a on a.asset_id=pc.passet_id    left join gobe_AssetCountryMap acm on acm.asset_id=pc.asset_id    left join gobe_ContentCountryMap ccm4 on ccm4.content_id=pc.content_id    where pl.passet_id in ( :ids )    group by unique_id ";
	public static final String PLAYLIST_DETAIL_QUERY = "select concat(pl.page_id,'-',pl.location_id,'-',pl.position,'-',pc.asset_id,'-',pc.content_id) as unique_id,pl.page_id   ,pl.location_id,pc.passet_id as playlist_id,pl.position,pc.asset_id,pc.content_id,pc.rank, p.playlist_title,p.playlist_type   ,CONVERT(a.is_publishable,CHAR) as playlist_is_publishable   ,group_concat(distinct concat(cf1.distributionURL,c1.mezz_file_path)) as playlist_images, group_concat(distinct c1.content_type_id) as playlist_image_type   , a1.asset_type,CONVERT(a1.is_publishable,CHAR) as is_publishable,a1.asset_title,a1.attribute_id    , group_concat(distinct IF(ra.role = 'Singer', ppa.name, null) order by ppa.rank desc,ppa.name) as singer     , group_concat(distinct IF(ra.role = 'Lyricist', ppa.name, null) order by ppa.rank desc,ppa.name) as lyricist     , group_concat(distinct IF(ra.role = 'Music director', ppa.name, null) order by ppa.rank desc,ppa.name) as 'music director'     , group_concat(distinct IF(ra.role = 'Actor', ppa.name, null) order by ppa.rank desc,ppa.name) as actor     , group_concat(distinct IF(ra.role = 'Director', ppa.name, null) order by ppa.rank desc,ppa.name) as director     , group_concat(distinct IF(ra.role = 'Playback', ppa.name, null) order by ppa.rank desc,ppa.name) as playback     , group_concat(distinct IF(ra.role = 'Producer', ppa.name, null) order by ppa.rank desc,ppa.name) as producer     ,left(trim(coalesce(mv.title,mu.title,tv.title,pv.playlist_title)),1) as prefix    ,coalesce(mv.title,mu.title,tv.title,pv.playlist_title) as title    ,coalesce(mv.description,mu.description,tv.description,pv.description) as description     ,coalesce(mv.language,mu.language,tv.language,pv.language) as language     ,coalesce(mv.rating,mu.rating,tv.rating,pv.rating) as rating     ,coalesce(mv.release_date,mu.release_date) as release_date    ,coalesce(mv.short_description,tv.short_description,pv.short_description) as short_description     ,coalesce(mv.release_year,mu.release_year) as release_year, mv.eros_rating, mv.synopsis, mv.duration     ,mu.musician,mu.top_songs,mu.number_of_tracks,mu.genre as attribute_genre,mu.lyricist as attribute_lyricist    ,tv.first_aired_date,tv.first_aired_year     ,c3.title as content_title, CONVERT(c3.is_publishable,CHAR) as content_is_publishable,c3.content_type_id    ,c3.short_description as content_short_description,c3.duration as content_duration, group_concat(distinct pcm5.product_id) as product    from gobe_PlaylistLocationMap pl join gobe_PlaylistContentMap pc on pl.passet_id=pc.passet_id    inner join gobe_Playlist p on p.asset_id=pc.passet_id   inner join gobe_Asset a on a.asset_id=pc.passet_id    left join gobe_AssetContentMap acm1          inner join gobe_Content c1 on acm1.content_id=c1.content_id and c1.is_publishable='YES'          inner join gobe_CloudFrontMap cf1 on cf1.catalog=c1.mezz_catalog          inner join gobe_Images i1 on i1.content_type_id = c1.content_type_id  on acm1.asset_id=pc.passet_id       left join gobe_Asset a1 on a1.asset_id=pc.asset_id   left join gobe_AssetPeopleMap apmp                   inner join gobe_People ppa on ppa.people_id=apmp.people_id                   inner join gobe_Roles ra on ra.role_id=apmp.role_id     on apmp.asset_id=pc.asset_id    left join gobe_Movie mv on a1.attribute_id=mv.movie_id and a1.asset_type='MOVIE'     left join gobe_Music mu on a1.attribute_id=mu.album_id and a1.asset_type='MUSIC ALBUM'     left join gobe_TVShow tv on a1.attribute_id=tv.tv_show_id and a1.asset_type='TV SHOWS'     left join gobe_Playlist pv on a1.asset_id=pv.asset_id and a1.asset_type='PLAYLIST'    left join gobe_Content c3 on c3.master_asset_id=pc.asset_id and c3.content_id=pc.content_id    left join gobe_ProductContentMap pcm5 on pcm5.content_id=pc.content_id   where pl.passet_id in ( :ids )   group by unique_id    ";
	public static final String PLAYLIST_ID_QUERY = "select distinct pc.passet_id as unique_id  from gobe_PlaylistLocationMap pl join gobe_PlaylistContentMap pc on pl.passet_id=pc.passet_id       inner join gobe_Playlist p on p.asset_id=pc.passet_id      inner join gobe_Asset a on a.asset_id=pc.passet_id ";

	
	//Delta import queries
	public static final String CONTENT_ASSET_DELTA_QUERY = "select c.content_id as unique_id from gobe_Content c,gobe_Asset a where a.asset_id=c.master_asset_id and c.content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and (a.update_time > (CURDATE() - INTERVAL :interval DAY) or c.update_time > (CURDATE() - INTERVAL :interval DAY)) and a.is_publishable='YES' and c.is_publishable='YES' ";
	public static final String CONTENT_PARENT_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select ref_content_id from gobe_ContentContentMap where  update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_GENRE_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_ContentGenreMap where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_IMAGE_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (select distinct content_type_id from gobe_Images) and master_asset_id=null and is_publishable='YES' and content_id in (select content_id from gobe_ContentContentMap where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_PRODUCT_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_ProductContentMap where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_ALLOW_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_GeoAllowContent where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_BLOCK_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_GeoBlockContent where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_ROLE_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_ContentPeopleMap where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_KEYWORD_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_ContentKeywordMap where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_BITRATE_DELTA_QUERY = "select content_id as unique_id  from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_ContentProfileMap where update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String CONTENT_RECOMMENDATION_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and master_asset_id is not null and is_publishable='YES' and content_id in (select content_id from gobe_ContentRecoMap where update_time > (CURDATE() - INTERVAL :interval DAY))";
	
	public static final String ASSET_ROLE_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in (select apm.asset_id from gobe_AssetPeopleMap apm,gobe_Asset a  where apm.asset_id=a.asset_id and a.is_publishable='YES' and  apm.update_time > (CURDATE() - INTERVAL :interval DAY))";
	public static final String ASSET_IMAGE_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in ( select acm.asset_id from gobe_AssetContentMap acm, gobe_Asset a where acm.asset_id=a.asset_id and a.is_publishable='YES' and acm.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	public static final String ASSET_ALLOW_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in ( select gaa.asset_id from gobe_GeoAllowAsset gaa, gobe_Asset a  where gaa.asset_id=a.asset_id and a.is_publishable='YES' and gaa.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	public static final String ASSET_BLOCK_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in ( select gba.asset_id from gobe_GeoBlockAsset gba, gobe_Asset a where gba.asset_id=a.asset_id and a.is_publishable='YES' and gba.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	public static final String ASSET_PRODUCT_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in ( select acm.asset_id from gobe_AssetContentMap acm, gobe_Asset a where acm.asset_id=a.asset_id and a.is_publishable='YES' and acm.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	public static final String ASSET_CONTENT_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in ( select acm.asset_id from gobe_AssetContentMap acm , gobe_Asset a where acm.asset_id=a.asset_id and a.is_publishable='YES' and acm.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	public static final String ASSET_KEYWORD_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in ( select akm.asset_id from gobe_AssetKeywordMap akm, gobe_Asset a  where akm.asset_id=a.asset_id and a.is_publishable='YES' and akm.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	public static final String ASSET_RECOMMENDATION_DELTA_QUERY = "select content_id as unique_id from gobe_Content where content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and is_publishable='YES' and master_asset_id in ( select mrm.asset_id from gobe_MovieRecoMap mrm, gobe_Asset a where mrm.asset_id=a.asset_id and a.is_publishable='YES' and mrm.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	
	public static final String CONTENT_DELETE_QUERY = " SELECT content_id as unique_id FROM gobe_Content c,gobe_Asset a WHERE a.asset_id=c.master_asset_id and c.content_type_id in (1,2,3,4,5,6,7,23,24,25,26,33,34,45,50) and (a.is_publishable='NO' or c.is_publishable='NO') and (a.update_time > (CURDATE() - INTERVAL :interval DAY) or c.update_time > (CURDATE() - INTERVAL :interval DAY) )";
	
	
	@Autowired
	private JdbcTemplate contentJdbcTemplate;

	@Autowired
	private NamedParameterJdbcTemplate contentNamedParameterJdbcTemplate;

	protected JdbcTemplate getJdbcTemplate() {
		return contentJdbcTemplate;
	}

	protected NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {
		return contentNamedParameterJdbcTemplate;
	}
}
